# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16vqFH8Pfz9mnyNhPsgRJGFfQavUcJkBR
"""

#@title
import csv
import io
from google.colab import files

uploaded = files.upload()

#========
def UploadFile():
    """Upload a file and return its content as an io string."""
    for fn in uploaded.keys():
        content_str = uploaded[fn].decode("utf-8")
        return io.StringIO(content_str)

#========
def CleanParties(column):
    """Removes any text within parentheses."""
    parties = column.replace("(",";(").split(";")
    party = []
    for i in range (0,len(parties)):
        if parties[i].find("(") == -1:
            party.append(parties[i])
        i+=1
    preposition = ", between " if len(party) == 2 else ", among "
    parties = ""
    for i in range (0,len(party)-1):
        parties = parties + party[i].strip() + ", "
    parties = parties + "and " + party[len(party)-1].strip()
    return parties, preposition

#========
def redactions(date):
    """If any of the year, month, or day aren't valid, replace with unknown."""
    if date != "(None entered)":
        date = date.split("/")
        try:
            month = datetime.strptime(date[0], '%m')
            month = month.strftime("%B")
        except ValueError:
            month = "Unknown"
        try:
            day = datetime.strptime(date[1], '%d')
            day = day.strftime("%d")
        except ValueError:
            day = "Unknown"
        try:
            year = datetime.strptime(date[2], '%Y')
            year = year.strftime("%Y")
        except ValueError:
            year = "Unknown"
        dated = month + " " + day + ", " + year
        if month == "Unknown" and day == "Unknown" and year == "Unknown":
            dated = "Unknown"
    else:
        dated = "Unknown"
    return dated

#@title { run: "auto" }
Field = "Most Favored Nation" #@param ["Document Name", "Parties", "Agreement Date", "Effective Date", "Expiration Date", "Renewal Term", "Notice Period to Terminate Renewal", "Governing Law", "Most Favored Nation", "Competitive Restriction Exception (exception to Non-Compete, No-Solicit of Customer & No-Solicit of Employees)", "Non-Compete", "Exclusivity", "No-Solicit of Customers", "No-Solicit of Employees", "Non-Disparagement", "Termination for Convenience", "ROFR/ROFO/ROFN", "Change of Control", "Anti-assignment", "Revenue/Profit Sharing", "Price Increase Restrictions", "Minimum Commitment", "Volume Restriction", "IP Ownership Assignment", "Joint IP Ownership", "License Grant", "Non-Transferable License", "Affiliate License-Licensor", "Affiliate License-Licensee", "Unlimited/All-You-Can-Eat License", "Irrevocable or Perpetual License", "Source Code Escrow", "Post-termination Services", "Audit Rights", "Uncapped Liability", "Cap on Liability", "Liquidated Damages", "Warranty Duration", "Insurance", "Covenant not to Sue", "Third Party Beneficiary"] {allow-input: true}
lister = Field
if lister == "":
    print("Please select a field from the dropdown.")

#@title
import datetime
from datetime import datetime

#========
def UploadAndProcessFile():
    reader = csv.DictReader(UploadFile(), delimiter='\t')
    count = 1
    fout = open("lister.txt", "w")
    #========
    for row in reader:
        if row[lister] != "(None entered)":
            #========
            parties, preposition = CleanParties(row['Parties-Answer (full name ("abbreviation"); full name ("abbreviation")'])
            #========
            try:
                dated = datetime.strptime(row["Agreement Date-Answer (mm/dd/year)"], '%d/%m/%Y')
                dated = datetime(dated.year, dated.month, dated.day).strftime("%B %d, %Y")
            except ValueError:
                dated = redactions(row["Agreement Date-Answer (mm/dd/year)"])
            #========
            line_str = str(count) + ". " + str(row["Document Name"].title()) + ", dated " + str(dated) + preposition + str(parties) + "\n"
            fout.write(line_str)
            print(line_str)
            #[number]. [document name], dated [agreement date], [between/among*] [full party name, full party name, ... , and full party name]
            
            count+=1
    #print("Wrote %d lines to output file." % (count - 1))
    fout.close()

UploadAndProcessFile()

#@title
files.download('lister.txt')